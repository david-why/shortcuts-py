import yaml
from black import format_str as black, Mode as BlackMode
from autoflake import fix_code as autoflake
from isort import code as isort

IMPORTS = '''# This file is generated by scripts/generate_actions.py.

from typing import Literal, overload
from shortcuts_py.consts import AnyFile, Number, Text
from shortcuts_py.shortcuts import Action
from shortcuts_py.templ import TemplateStr
from shortcuts_py.utils import parse_attachment
from shortcuts_py.variable import DictVariable, FileVariable, NumberVariable, PDFVariable, TextVariable, Variable

'''

with open('scripts/actions.yml') as f:
    DATA = yaml.safe_load(f)


def parse_param(param, pdata):
    type = pdata['type']
    if type == 'enum':
        return param
    if type == 'text':
        return 'TemplateStr(' + param + ')'
    if type == 'number' or type == 'file' or type == 'variable':
        return 'parse_attachment(' + param + ')'
    return param


def parse_action(action, data):
    if 'override' in data:
        return data['override']
    if 'params' not in data:
        data['params'] = {}
    text = 'def ' + action + '('
    for param, pdata in data['params'].items():
        text += param + ': '
        type = pdata['type']
        if type == 'enum':
            text += 'Literal['
            for option in pdata['enum']:
                text += repr(option) + ', '
            text = text[:-2] + ']'
        elif type == 'text':
            text += 'Text'
        elif type == 'number':
            text += 'Number'
        elif type == 'file':
            text += 'AnyFile'
        elif type == 'variable':
            text += 'Variable'
        else:
            text += type
        if pdata.get('optional'):
            text += ' | None'
            if 'default' not in pdata:
                text += ' = None'
        if 'default' in pdata:
            text += ' = ' + repr(pdata['default'])
        text += ', '
    text = text.rstrip(', ') + '):\n'
    if 'custom_pre' in data:
        for line in data['custom_pre'].splitlines():
            text += '    ' + line + '\n'
    text += '    params = {'
    for param, pdata in data['params'].items():
        if pdata.get('optional'):
            continue
        text += repr(pdata['id']) + ': ' + parse_param(param, pdata) + ', '
    text = text.rstrip(', ') + '}\n'
    for param, pdata in data['params'].items():
        if not pdata.get('optional'):
            continue
        text += (
            '    if '
            + param
            + ''' is not None:
        params['''
            + repr(pdata['id'])
            + '] = '
            + parse_param(param, pdata)
            + '\n'
        )
    text += '    action = Action(' + repr(data['id']) + ', params)\n'
    if 'output' in data:
        text += '    return action.output(' + repr(data['output']['name'])
        if 'type' in data['output']:
            text += ', ' + data['output']['type']
        text += ')\n'
    return text


for category, actions in DATA['actions'].items():
    print(f'generating {category}.py')
    contents = IMPORTS + '__all__ = ['
    for action in actions:
        contents += repr(action) + ', '
    contents += ']\n'
    for action, data in actions.items():
        body = parse_action(action, data)
        contents += '\n' + body
    contents = black(
        isort(autoflake(contents, remove_all_unused_imports=True)),
        mode=BlackMode(string_normalization=False),
    )
    with open(f'shortcuts_py/actions/{category}.py', 'w') as f:
        f.write(contents)
