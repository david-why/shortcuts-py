# This file is generated by scripts/generate_actions.py.

from typing import Literal

from shortcuts_py.consts import AnyFile, Text
from shortcuts_py.shortcuts import Action
from shortcuts_py.templ import TemplateStr
from shortcuts_py.utils import parse_attachment
from shortcuts_py.variable import FileVariable, PDFVariable, TextVariable, Variable

__all__ = [
    'add_pdf_to_books',
    'append_to_text_file',
    'create_folder',
    'combine_text',
    'delete_files',
    'extract_text_from_image',
    'generate_qr_code',
    'get_contents_of_folder',
    'get_file_from_folder',
    'make_html_from_rich_text',
    'make_markdown_from_rich_text',
    'make_pdf',
    'select_file',
    'select_folder',
    'quick_view',
    'save_to_files',
    'scan_barcode',
    'speak_text',
    'text',
]


def add_pdf_to_books(file: Variable):
    params = {'BooksInput': parse_attachment(file)}
    action = Action('com.apple.iBooks.openin', params)


def append_to_text_file(
    folder: AnyFile, path: Text, text: Text, make_new_line: bool = True
):
    params = {
        'WFFile': parse_attachment(folder),
        'WFFilePath': TemplateStr(path),
        'WFInput': TemplateStr(text),
        'WFAppendOnNewLine': make_new_line,
    }
    action = Action('is.workflow.actions.file.append', params)
    return action.output('Appended File', FileVariable)


def create_folder(parent: AnyFile, name: Text):
    params = {'WFFolder': parse_attachment(parent), 'WFFilePath': TemplateStr(name)}
    action = Action('is.workflow.actions.files.createfolder', params)
    return action.output('Created Folder', FileVariable)


def combine_text(
    text: Variable,
    separator: Text,
    sep_type: Literal['New Lines', 'Spaces', 'Custom'] | None = None,
):
    if sep_type is None:
        sep_type = 'New Lines' if separator is None else 'Custom'
    params = {
        'text': parse_attachment(text),
        'WFTextCustomSeparator': TemplateStr(separator),
    }
    if sep_type is not None:
        params['WFTextSeparator'] = sep_type
    action = Action('is.workflow.actions.text.combine', params)
    return action.output('Combined Text', TextVariable)


def delete_files(files: AnyFile):
    params = {'WFInput': parse_attachment(files)}
    action = Action('is.workflow.actions.file.delete', params)


def extract_text_from_image(image: Variable):
    params = {'WFImage': parse_attachment(image)}
    action = Action('is.workflow.actions.extracttextfromimage', params)
    return action.output('Text from Image', TextVariable)


def generate_qr_code(
    text: Text, correction: Literal['Low', 'Medium', 'Quartile', 'High'] = 'Medium'
):
    params = {'WFText': TemplateStr(text), 'WFQRErrorCorrectionLevel': correction}
    action = Action('is.workflow.actions.generatebarcode', params)
    return action.output('QR Code')


def get_contents_of_folder(folder: AnyFile):
    params = {'WFFolder': parse_attachment(folder)}
    action = Action('is.workflow.actions.file.getfoldercontents', params)
    return action.output('Contents of Folder', FileVariable)


def get_file_from_folder(folder: AnyFile, path: str, error_not_found: bool = True):
    params = {
        'WFFile': parse_attachment(folder),
        'WFGetFilePath': path,
        'WFFileErrorIfNotFound': error_not_found,
    }
    action = Action('is.workflow.actions.documentpicker.open', params)
    return action.output('File', FileVariable)


def make_html_from_rich_text(rich_text: Variable):
    params = {'WFInput': parse_attachment(rich_text)}
    action = Action('is.workflow.actions.gethtmlfromrichtext', params)
    return action.output('HTML from Rich Text', TextVariable)


def make_markdown_from_rich_text(rich_text: Variable):
    params = {'WFInput': parse_attachment(rich_text)}
    action = Action('is.workflow.actions.getmarkdownfromrichtext', params)
    return action.output('Markdown from Rich Text', TextVariable)


def make_pdf(
    input: Variable,
    *,
    margin: bool = False,
    pages: int | tuple[int, int] | None = None,
    merge: Literal['Append', 'Shuffle'] = 'Append'
) -> PDFVariable:
    params = {'WFInput': parse_attachment(input), 'WFPDFDocumentMergeBehavior': merge}
    if pages is None:
        params['WFPDFIncludedPages'] = 'All Pages'
    elif isinstance(pages, int):
        params['WFPDFIncludedPages'] = 'Single Page'
        params['WFPDFSinglePage'] = str(pages)
    else:
        params['WFPDFIncludedPages'] = 'Page Range'
        params['WFPDFPageRangeStart'] = str(pages[0])
        params['WFPDFPageRangeEnd'] = str(pages[1])
    action = Action('is.workflow.actions.makepdf', params)
    return action.output('PDF', PDFVariable)


def select_file(multiple: bool = False):
    params = {'SelectMultiple': multiple}
    action = Action('is.workflow.actions.file.select', params)
    return action.output('File', FileVariable)


def select_folder(multiple: bool = False):
    action = Action(
        'is.workflow.actions.file.select',
        {'SelectMultiple': multiple, 'WFPickingMode': 'Folders'},
    )
    return action.output('File', FileVariable)


def quick_view(value: Variable, fullscreen: bool = False):
    params = {
        'WFInput': parse_attachment(value),
        'WFQuickLookActionFullScreen': fullscreen,
    }
    action = Action('is.workflow.actions.previewdocument', params)


def save_to_files(file: AnyFile):
    params = {'WFInput': parse_attachment(file)}
    action = Action('is.workflow.actions.documentpicker.save', params)
    return action.output('Saved File', FileVariable)


def scan_barcode():
    params = {}
    action = Action('is.workflow.actions.scanbarcode', params)
    return action.output('QR/Barcode')


def speak_text(text: Text):
    params = {'WFText': TemplateStr(text)}
    action = Action('is.workflow.actions.speaktext', params)


def text(text: Text):
    params = {'WFTextActionText': TemplateStr(text)}
    action = Action('is.workflow.actions.gettext', params)
    return action.output('Text', TextVariable)
